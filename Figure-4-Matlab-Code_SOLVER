% Figure 4 - Solver Code

function [] = SingleCellType_System_solved_MDPI

close all;
clearvars;
tic

a = 0.01; % Maximum magnitude of Gaussian signal (opposite-cell interactions)
b = a; % Maximum magnitude of Gaussian signal (same-cell interactions)

cN = 1; % Twice the variance of signal (N cells)
cP = cN; % Twice the variance of signal (P cells)

wN = 0.8; % Weight given by N to gradient of signal P
wP = 0.8; % Weight given by P to gradient of signal N

thNP = 0.08; % Root of response of N to signal from P
thNN = 0.01; % Root of response of N to signal from N
thPN = 0.04; % Root of response of P to signal from N
thPP = 0.005; % Root of response of P to signal from P

VN = 1; % Maximum speed of N
vP = 1; % Maximum speed of P

f = thNP^2/8;
k = thPN^2/8; 

% Unused/old variables or variables related to theboundary
boundary = 0; % Setting for circular (0) vs rectangle (1) boundary
wdth = 12;
lgth = 12;
mult = 1.5;
rad = mult*5; % Radius of circular boundary
j = 0;
r = 0.894;
selfSgnl = false;
ncsOnly = true;
actSeq=1;

% Time-span to solve system over
dt = 1;
tEnd = 1000000;

%% NCs only initial positions
Ntot = 20;
XDIST = 1;
Xn0 = XDIST * rand(1,Ntot) + 5 - XDIST*0.5;
Yn0 = XDIST * rand(1,Ntot) + 5 - XDIST*0.5;

Xp0 = [2,3];
Yp0 = [2,1];
aSeq=repelem(0,length(Xn0));
boundary = 0;

% Calculating numbers of cells
nNcells=width(Xn0);
nPcells=width(Xp0);
% Setting up initial vector
x0 = mult*[Xn0,Yn0,Xp0,Yp0];

% Time-span to solve over
tspan = 0:dt:tEnd;
% Line width
lw = 2;

% If only paying attention to NCs,
%  P's remain still and don't produce much signal.
if (ncsOnly)
    vP = 0;
    a = 0.0001;
end

% Plotting initial positions
figure(1)
    hold on;
    axis equal;
    % Neural initial positions
    plot(mult*Xn0, mult*Yn0,'ro', LineWidth=lw);
    % Placodes initial positions
    if ncsOnly == false
        plot(mult*Xp0, mult*Yp0,'bs',LineWidth=lw);
    end
    set(gca,'fontsize',20)
    xlabel('x-axis position')% coord')
    ylabel('y-axis position')% coord')
    if not(boundary)
        pos = [0 0 2*rad 2*rad];
        rectangle('Position',pos,'Curvature',[1 1],LineWidth=lw);
    end
    set(gca,'fontsize',10)
    %title('ncs only initial conditions')
    if ncsOnly == false
        legend(["NC cell",'P cell']) %repelem("",nNcells)
    end
    if ncsOnly == true
        legend("NC cell")
    end
    fontsize(15,"points")
    saveas(gcf,'Fig4A_MDPI','epsc')

%% --- Solving ODE --- %%

parameter_vector = [cN cP a b r VN thNP selfSgnl f vP thPN ncsOnly k,wN,wP,rad,boundary,wdth,lgth,thNN, thPP, nNcells,nPcells,aSeq];
[t,x] = ode45(@Single_Type_System, tspan, x0, [], parameter_vector);
%ode23s

%% Re-slicing x into Xn, Yn, Xp, and Yp
xnmax = nNcells;
ynmax = xnmax + nNcells;
xpmax = ynmax + nPcells;
ypmax = xpmax + nPcells;
Xn = x(:,1:xnmax);
Yn = x(:,xnmax+1:ynmax);
Xp = x(:,ynmax+1:xpmax);
Yp = x(:,xpmax+1:ypmax);

toc
disp("Done simulating")
tic

%% Final positions
figure(5)
    hold on;
    axis equal;
    % Plot NCs
    for i=1:nNcells
        plot(Xn(length(Xn(:,1)),i), Yn(length(Xn(:,1)),i),'ro',LineWidth=lw);
    end
    % Plot Ps
    if ncsOnly == false
        for i=1:nPcells
            plot(Xp(length(Xp(:,1)),i), Yp(length(Xp(:,1)),i), 'bs',LineWidth=lw);
        end
    end
    %plot(Xn(:,nNcells), Yn(:,nNcells),'ro');
    %plot(Xp(:,nPcells), Yp(:,nPcells), 'bo');
    
    % Aesthetics
    set(gca,'fontsize',20)
    xlabel('x-axis position')% coord')
    ylabel('y-axis position')% coord')
    if not(boundary)
        pos = [0 0 2*rad 2*rad];
        rectangle('Position',pos,'Curvature',[1 1],LineWidth=lw);
    end
    set(gca,'fontsize',10)
    %title(tt)
    % Add a Legend
    if ncsOnly == false
        legend(["NC cell",repelem("",nNcells+1),'P cell'])
    end
    if ncsOnly == true
        legend("NC cell")
    end
    fontsize(15,"points")
    saveas(gcf,'Fig4B_MDPI','epsc')



%% Finally, save the data to a csv
% Take time measurement
disp("Done plotting")
end
